"""
Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms
will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.

>>> import os
>>> sum_of_even_fibonacci(35) == 2 + 8 + 34
True
>>> str(sum_of_even_fibonacci(4*10**6)) == os.getenv("EULER2")
True
"""

from itertools import takewhile


def even_fibonacci():
    """
    An iterator that yields the even Fibonacci numbers.

    Uses the recurrence relation F_{n+6} = 4*F_{n+3} + F_{n}, where
    F_i are the Fibonacci numbers of which F_{3i} are even.
    """
    x, y = 0, 2
    yield x
    yield y
    while True:
        x, y = y, 4 * y + x
        yield y


def sum_of_even_fibonacci(bound):
    """Sum of even Fibonacci numbers below `bound`."""
    return sum(takewhile(lambda x: x < bound, even_fibonacci()))


if __name__ == "__main__":
    print(sum_of_even_fibonacci(4 * 10 ** 6))
